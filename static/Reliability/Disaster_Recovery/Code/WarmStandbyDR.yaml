AWSTemplateFormatVersion: 2010-09-09
Description: 'This deployment includes SSM, CloudWatch, and allows instance reboot'
Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: 'Use an AMI of your choosing, we recommend to use the latest available'
  IsPrimary:
    Type: String
    Default: 'yes'
    AllowedValues:
      - 'yes'
      - 'no'
    Description: 'Is primary region'
  IsPromote:
    Type: String
    Default: 'no'
    AllowedValues:
      - 'yes'
      - 'no'
    Description: 'Promote secondary'
Conditions:
  CreatePrimaryDB:
    !Equals [!Ref IsPrimary, 'yes']
  CreateSecondaryDB:
    !Equals [!Ref IsPrimary, 'no']
  CreateFullApp: !Or
    - !Equals [!Ref IsPromote, 'yes']
    - !Condition CreatePrimaryDB
  EnableWriteFwd: !And
    - !Not [!Equals [!Ref IsPromote, 'yes']]
    - !Condition CreateSecondaryDB
Resources:
  UniShopAppV1VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value:  !Ref 'AWS::StackName'
  UniShopAppV1IGW:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value:  !Ref 'AWS::StackName'
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref UniShopAppV1VPC
      InternetGatewayId: !Ref UniShopAppV1IGW
  UniShopAppV1Subnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref UniShopAppV1VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-1'
  UniShopAppV1Subnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref UniShopAppV1VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - '1'
        - !GetAZs
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-2'
  UniShopAppV1PublicRoutTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref UniShopAppV1VPC
      Tags:
        - Key: Name
          Value:  !Ref 'AWS::StackName'
  UniShopAppV1PublicRout:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref UniShopAppV1PublicRoutTable
      GatewayId: !Ref UniShopAppV1IGW
      DestinationCidrBlock: 0.0.0.0/0
  UniShopAppV1PublicSubnetRoutTableAssoc1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref UniShopAppV1PublicRoutTable
      SubnetId: !Ref UniShopAppV1Subnet1
  UniShopAppV1PublicSubnetRoutTableAssoc2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref UniShopAppV1PublicRoutTable
      SubnetId: !Ref UniShopAppV1Subnet2
  DBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Open database for access
      VpcId: !Ref UniShopAppV1VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value:  !Ref 'AWS::StackName'
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: UniShopAppV1DBSubnetGroup
      SubnetIds:
        - !Ref UniShopAppV1Subnet1
        - !Ref UniShopAppV1Subnet2
  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Open App access
      VpcId: !Ref UniShopAppV1VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value:  !Ref 'AWS::StackName'
  EC2SecurityGroupDBRule:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !Ref EC2SecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      DestinationSecurityGroupId: !Ref DBSecurityGroup
  InstanceLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 7
  S3InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref S3Role
  S3Policy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub S3Policy-warm
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:GetObjectAcl'
              - 's3:PutObject'
              - 's3:PutObjectAcl'
            Resource:
              - !GetAtt
                - UIBucket
                - Arn
              - !Join
                - ''
                - - !GetAtt
                    - UIBucket
                    - Arn
                  - /*
          - Effect: Allow
            Action:
              - 'rds:ModifyDBCluster'
              - 'rds:Describe*'
            Resource:
              - '*'          
      Roles:
        - !Ref S3Role
  S3Role:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName:  !Sub '${AWS::StackName}-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'
      Path: /
  GlobalCluster:
    Condition: CreatePrimaryDB
    Type: 'AWS::RDS::GlobalCluster'
    Properties:
      GlobalClusterIdentifier: !Sub 'warm-global'
      SourceDBClusterIdentifier: !Ref RDSClusterPrimary
  RDSClusterPrimary:
    Condition: CreatePrimaryDB
    DeletionPolicy: Retain
    DependsOn:
      - DBSubnetGroup
    Type: 'AWS::RDS::DBCluster'
    Properties:
      MasterUsername: UniShopAppV1User
      MasterUserPassword: UniShopAppV1Password
      DBClusterIdentifier:  !Ref 'AWS::StackName'
      Port: 3306
      DBClusterParameterGroupName: default.aurora-mysql5.7
      Engine: aurora-mysql
      EngineVersion: 5.7.mysql_aurora.2.09.2
      VpcSecurityGroupIds:
         - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      DatabaseName:  unishop
  RDSClusterSecondary:
    Condition: CreateSecondaryDB
    DeletionPolicy: Retain
    DependsOn:
      - DBSubnetGroup
    Type: 'AWS::RDS::DBCluster'
    Properties:
      GlobalClusterIdentifier: !Sub 'warm-global'
      DBClusterIdentifier: !Sub 'warm-secondary'
      DBClusterParameterGroupName: default.aurora-mysql5.7
      Engine: aurora-mysql
      EngineVersion: 5.7.mysql_aurora.2.09.2
      VpcSecurityGroupIds:
         - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
  RDSDBInstance:
    Type: 'AWS::RDS::DBInstance'
    DeletionPolicy: Retain
    Properties:
      Engine: aurora-mysql
      DBClusterIdentifier: !If [CreatePrimaryDB, !Ref RDSClusterPrimary, !Ref RDSClusterSecondary]
      PubliclyAccessible: 'true'
      DBInstanceClass: db.r5.xlarge
      DBParameterGroupName: default.aurora-mysql5.7
      DBInstanceIdentifier: unishop-warm
  UIBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      WebsiteConfiguration:
        ErrorDocument: error.html
        IndexDocument: index.html
      VersioningConfiguration:
        Status: Enabled                
  WebServerGroup:
    DependsOn: RDSDBInstance
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AvailabilityZones:
        - !Select
          - '0'
          - !GetAZs
            Ref: 'AWS::Region'
        - !Select
          - '1'
          - !GetAZs
            Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value:  !Ref 'AWS::StackName'
          PropagateAtLaunch: true            
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: !If [CreateFullApp, 2, 1]
      MaxSize: !If [CreateFullApp, 5, 5]
      LoadBalancerNames:
        - !Ref ElasticLoadBalancer
      VPCZoneIdentifier:
        - !Ref UniShopAppV1Subnet1
        - !Ref UniShopAppV1Subnet2
      HealthCheckType: ELB
      HealthCheckGracePeriod: 60
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
        Count: '1'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          default:
            - update
            - install
            - configure
            - create-service-files
            - start-service
          secondary:
            - update
            - install
            - configure
            - configure-global-db            
            - create-service-files
            - start-service
        update:
          commands:
            update:
              command: sudo yum update -y
        install:
          packages:
            rpm:
              'https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm': []
            yum:
              amazon-cloudwatch-agent: []
              java-1.8.0-openjdk-devel: []
              mariadb: []
        configure:
          commands:
            0-populate-buckets:
              command: !Join
                - ''
                - - |
                    #!/bin/bash      

                  - |
                    sudo mkdir /home/ec2-user/UniShopUI/                              
                
                  - export AWS_DEFAULT_REGION=
                  - !Ref 'AWS::Region'
                  - |+

                  - export UI_RANDOM_NAME=
                  - !Ref UIBucket
                  - |+                                          

                  - export HOSTNAME=
                  - "http://"
                  - !GetAtt ElasticLoadBalancer.DNSName
                  - |+

                  - export JSON_STRING=
                  - $(echo '{"host":"'"$HOSTNAME"'","region":"'"$AWS_DEFAULT_REGION"'"}')
                  - |+                                          

                  - |
                    echo $JSON_STRING | sudo tee /home/ec2-user/UniShopUI/config.json                          

                  - >
                    aws s3 cp /home/ec2-user/UniShopUI/config.json
                    s3://$UI_RANDOM_NAME/config.json --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers         
                    
                  - >
                    sudo aws s3 cp s3://ee-assets-prod-us-east-1/modules/630039b9022d4b46bb6cbad2e3899733/v1/UniShopAppV1-0.0.1-SNAPSHOT.jar /home/ec2-user/ --no-sign-request  
        configure-global-db:
          commands:
            1-enable-write-forwarding:
              command: sudo aws rds modify-db-cluster --db-cluster-identifier warm-secondary --region us-west-1 --enable-global-write-forwarding
        create-service-files:
          files:
            /etc/systemd/system/unishop.service:
              encoding: plain
              content: !Join
                - ''
                - - |
                    [Unit]
                  - |
                    Description=Restart UniShop
                  - |
                    Wants=network.target
                  - >
                    After=syslog.target network-online.target
                    amazon-cloudwatch-agent.target
                  - |+

                  - |
                    [Service]
                  - |
                    Type=forking
                  - |
                    ExecStart=/home/ec2-user/unishopstart.sh
                  - |
                    ExecReload=/home/ec2-user/unishoprestart.sh
                  - |
                    ExecStop=/home/ec2-user/unishopstop.sh
                  - |                                    
                    PrivateTmp=true
                  - |+

                  - |
                    [Install]
                  - |
                    WantedBy=multi-user.target
              mode: '000644'
              group: root
              user: root
            /home/ec2-user/unishopcfg.sh:
              encoding: plain
              content: !Join
                - ''
                - - |
                    #!/bin/bash
                  - export DB_ENDPOINT=
                  - !If [CreatePrimaryDB, !GetAtt RDSClusterPrimary.Endpoint.Address, !If [CreateFullApp, !GetAtt RDSClusterSecondary.Endpoint.Address, !GetAtt RDSClusterSecondary.ReadEndpoint.Address]]
                  - |+                  
              mode: '000555'
              group: ec2-user
              user: ec2-user
            /home/ec2-user/unishoprestart.sh:
              encoding: plain
              content: !Join
                - ''
                - - |
                    #!/bin/bash
                  - |                    
                    source /home/ec2-user/unishopstop.sh
                  - |
                    source /home/ec2-user/unishopstart.sh     
                  - |+
              mode: '000555'
              group: ec2-user
              user: ec2-user
            /home/ec2-user/unishopstop.sh:
              encoding: plain
              content: !Join
                - ''
                - - |
                    #!/bin/bash
                  - |
                    APP_NAME=UniShopAppV1-0.0.1-SNAPSHOT.jar                                                                     
                  - | 
                    pid=`ps -ef | grep $APP_NAME | grep -v grep | awk '{print $2}'`
                  - |
                    if [ -z "${pid}" ]; 
                  - |
                    then echo ""
                  - |
                    else
                  - |
                    echo "kill thread...$pid"
                  - |
                    kill -9 $pid                  
                  - |
                    fi
              mode: '000555'
              group: ec2-user
              user: ec2-user              
            /home/ec2-user/unishopstart.sh:
              encoding: plain
              content: !Join
                - ''
                - - |
                    #!/bin/bash
                  - |                    
                    source /home/ec2-user/unishopcfg.sh   
                  - >
                  - java -jar
                  - ' '
                  - !If [EnableWriteFwd, '-Dspring.profiles.active=warm ','']
                  - >
                    /home/ec2-user/UniShopAppV1-0.0.1-SNAPSHOT.jar
                    &>
                    /home/ec2-user/app.log
                    &
              mode: '000555'
              group: ec2-user
              user: ec2-user              
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: !Join
                - ''
                - - |
                    {
                  - |2
                        "logs": {
                  - |2
                            "logs_collected": {
                  - |2
                                "files": {
                  - |2
                                    "collect_list": [
                  - |2
                                        {
                  - |2
                                            "file_path": "/home/ec2-user/app.log",
                  - !Join
                    - ''
                    - - '                        "log_group_name":'
                      - '"'
                      - !Ref InstanceLogGroup
                      - |
                        ",
                  - !Join
                    - ''
                    - - '                        "log_stream_name":'
                      - '"'
                      - !Ref InstanceLogGroup
                      - |
                        -app",
                  - |2
                                            "timezone": "Local"
                  - |2
                                        }
                  - |2
                                    ]
                  - |2
                                }
                  - |2
                            }
                  - |2
                        }
                  - '}'
              mode: '000444'
              group: ec2-user
              user: ec2-user
        start-service:
          commands:
            0-start-service:
              command: !Join
                - ''
                - - |
                    sudo systemctl daemon-reload
                  - |
                    sudo systemctl enable unishop
                  - |
                    sudo systemctl start unishop
                  - >
                    sudo amazon-cloudwatch-agent-ctl -a fetch-config -s -m ec2
                    -c
                    file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
    Properties:
      InstanceType: t3.small
      ImageId: !Ref LatestAmiId
      SecurityGroups:
        - !Ref EC2SecurityGroup
      IamInstanceProfile: !Ref S3InstanceProfile
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - |
              sudo yum install -y aws-cfn-bootstrap
            - /opt/aws/bin/cfn-init -v
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource LaunchConfig '
            - '         --region '
            - !Ref 'AWS::Region'
            - !If [CreatePrimaryDB, '         --configsets default','         --configsets secondary']
            - |+

            - /opt/aws/bin/cfn-signal -e $?
            - ' --stack '
            - !Ref 'AWS::StackName'
            - ' --resource WebServerGroup'
            - ' --region '
            - !Ref 'AWS::Region'
            - |+
            
  ElasticLoadBalancer:
    DependsOn: AttachGateway
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      CrossZone: 'true'
      SecurityGroups:
        - !Ref EC2SecurityGroup
      Subnets:
        - !Ref UniShopAppV1Subnet1
        - !Ref UniShopAppV1Subnet2
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          Protocol: HTTP
      HealthCheck:
        Target: 'TCP:80'
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    DependsOn: RDSDBInstance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          default:
            - update
            - install
            - configure
            - create-tables
          secondary:
            - update
            - install
            - configure
        update:
          commands:
            update:
              command: sudo yum update -y
        install:
          packages:
            rpm:
              'https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm': []
            yum:
              amazon-cloudwatch-agent: []
              mariadb: []
              java-1.8.0-openjdk-devel: []
        configure:
          commands:
            0-populate-buckets:
              command: !Join
                - ''
                - - |
                    #!/bin/bash      
                  - |
                    sudo mkdir /home/ec2-user/UniShopUI/                                            
                  - >
                    sudo aws s3 cp s3://ee-assets-prod-us-east-1/modules/630039b9022d4b46bb6cbad2e3899733/v1/create_tables.sql /home/ec2-user/ --no-sign-request    
                  - >
                  - export UI_RANDOM_NAME=
                  - !Ref UIBucket
                  - |+       

                    aws s3 cp s3://ee-assets-prod-us-east-1/modules/630039b9022d4b46bb6cbad2e3899733/v1/UniShopUI/ /home/ec2-user/UniShopUI/ --no-sign-request --recursive                                           
                  - >
                    aws s3 cp /home/ec2-user/UniShopUI/ s3://$UI_RANDOM_NAME/ --exclude "config.json" --recursive --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers  
        create-tables:
          commands:
            1-create-tables:
              command: !Join
                - ''
                - - 'sudo mysql -u UniShopAppV1User -h '
                  - !If [CreatePrimaryDB, !GetAtt RDSClusterPrimary.Endpoint.Address, !GetAtt RDSClusterSecondary.ReadEndpoint.Address]
                  - |2
                     -P 3306 -pUniShopAppV1Password < /home/ec2-user/create_tables.sql
    Properties:
      InstanceType: t3.small
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref UniShopAppV1Subnet1
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      IamInstanceProfile: !Ref S3InstanceProfile
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - |
              sudo yum install -y aws-cfn-bootstrap
            - /opt/aws/bin/cfn-init -v
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource EC2Instance '
            - '         --region '
            - !Ref 'AWS::Region'
            - !If [CreatePrimaryDB, '         --configsets default','         --configsets secondary']
            - |+

            - /opt/aws/bin/cfn-signal -e $?
            - ' --stack '
            - !Ref 'AWS::StackName'
            - ' --resource EC2Instance'
            - ' --region '
            - !Ref 'AWS::Region'
            - |+

      Tags:
        - Key: Name
          Value:  !Sub '${AWS::StackName}-build'
Outputs:
  WebsiteURL:
    Value: !GetAtt UIBucket.WebsiteURL
    Description: Website URL
