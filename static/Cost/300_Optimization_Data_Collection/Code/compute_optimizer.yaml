AWSTemplateFormatVersion: '2010-09-09'
Description: Retrieves AWS Compute Optimizer information from across an organization
Parameters:
  DatabaseName:
    Type: String
    Description: Name of the Athena database to be created to hold lambda information
    Default: optimization_data
  DestinationBucket:
    Type: String
    Description: Name of the S3 Bucket to be created to hold data information
    AllowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
  RoleNameARN:
    Type: String
    Description: ARN of the IAM role deployed in the management accounts which can retrieve lambda data.
  CFDataName:
    Type: String
    Description: The name of what this cf is doing.
    Default: ComputeOptimizer
  Schedule:
    Type: String
    Description: Cron job to trigger the lambda using cloudwatch event
    Default: "rate(14 days)"
  DestinationBucketARN:
    Type: String
    Description: ARN of the S3 Bucket that exists or needs to be created to hold rightsizing information
  GlueRoleARN:
    Type: String
  S3CrawlerQue:
    Type: String
    Description: SQS that will be used to trigger the crawler lambda to pull data in
  RolePrefix:
    Type: String
    Description: This prefix will be placed in front of all roles created. Note you may wish to add a dash at the end to make more readable
  BucketPrefix:
    Type: String
    Default: 'costoptimization'
    Description: This prefix will be used for buckets creation
    AllowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9\-])$)
  DeployRegions:
    Type: String
    Description: "A comma separated list of AWS regions where compute-optimizer needs to collect info. Example: us-east-1,eu-west-1"
Outputs:
  LambdaARN:
    Description: Lambda Arn
    Value:
       Fn::GetAtt:
        - LambdaTriggerExport
        - Arn
  CrawlerFunctionARN:
    Description: Crawler Lambda Arn
    Value:
       Fn::GetAtt:
        - CrawlerFunction
        - Arn
Resources:
  StackSetAdminRole:
    Type: AWS::IAM::Role
    DependsOn: StackSetExecutionRole
    Properties:
      RoleName:  StackSetAdminRole
      Description: "This role is used by cloudformation to create StackSets in different regions. See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs.html"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: StackSetAdminRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sts:AssumeRole
                Resource: !Sub "arn:aws:iam::*:role/${RolePrefix}StackSetExecutionRole"
  StackSetExecutionRole:  #see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs.html
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${RolePrefix}StackSetExecutionRole"
      Description: "This role is used by cloudformation to create StackSets in different regions. See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs.html"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StackSetParameterExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DeleteStack
                  - cloudformation:UpdateStack
                Resource: !Sub
                  - 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${SelectValue}*' 
                  - SelectValue: !Select [0, !Split ["-", !Ref AWS::StackName]]
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess #FIXME: Can it be more narrow than this? Stacksets needs to create buckets and roles
        ## Bucket names are ultimately : costoptimizationdata*
  ReplicaitonBucketsStackSet:
    Type: AWS::CloudFormation::StackSet
    DependsOn:
      - StackSetExecutionRole
      - StackSetAdminRole
    Properties:
      Description: !Sub "S3 buckets in multiple regions replicating data to s3://${DestinationBucket}."
      PermissionModel: SELF_MANAGED
      ManagedExecution:
        Active: true
      Parameters:
        - ParameterKey: Name
          ParameterValue: !Sub "${BucketPrefix}${AWS::AccountId}"
        - ParameterKey: DestinationBucket
          ParameterValue: !Ref DestinationBucket
        - ParameterKey: ManagementAccountID
          ParameterValue: !Select [ "4", !Split [":", !Ref RoleNameARN] ]
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref "AWS::AccountId"
          Regions: !Split [ ',', !Ref DeployRegions]
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_NAMED_IAM
      StackSetName: !Sub "${BucketPrefix}${AWS::AccountId}-comp-optim-buckets"
      AdministrationRoleARN: !GetAtt [StackSetAdminRole, Arn]
      ExecutionRoleName: !Sub "${RolePrefix}StackSetExecutionRole"
      TemplateBody: |
        AWSTemplateFormatVersion: '2010-09-09'
        Description: This template creates a bucket in a given region and configure a replication to the main bucket
        Parameters:
          Name:
            Type: String
            Description: Prefix of regional bucket name
          ManagementAccountID:
            Type: String
            Description: Management Account ID that will send data to the bucket
          DestinationBucket:
            Type: String
            Description: A name of the main bucket where all data will be stored
        Resources:
          BucketPolicy:
            Type: AWS::S3::BucketPolicy
            Properties:
              Bucket: !Ref S3Bucket
              PolicyDocument:
                Version: 2012-10-17
                Statement:
                - Effect: Allow
                  Principal:
                    Service: compute-optimizer.amazonaws.com
                  Action:
                  - s3:GetBucketAcl
                  - s3:GetBucketPolicyStatus
                  Resource: !Sub "arn:aws:s3:::${Name}-${AWS::Region}"
                - Effect: Allow
                  Principal:
                    Service: compute-optimizer.amazonaws.com
                  Action: s3:PutObject
                  Condition:
                    StringEquals:
                          s3:x-amz-acl:  bucket-owner-full-control
                          aws:SourceAccount: !Sub ${ManagementAccountID}
                          aws:SourceArn: !Sub arn:aws:compute-optimizer:${AWS::Region}:${ManagementAccountID}:*
                  Resource: !Sub "arn:aws:s3:::${Name}-${AWS::Region}/*"
          ReplicaRole:
            Type: AWS::IAM::Role
            Properties:
              AssumeRolePolicyDocument:
                Statement:
                - Action: ['sts:AssumeRole']
                  Effect: Allow
                  Principal:
                    Service: [s3.amazonaws.com]
          ReplicaPolicy:
            Type: AWS::IAM::Policy
            Properties:
              PolicyDocument:
                Statement:
                - Action:
                  - s3:GetReplicationConfiguration
                  - s3:ListBucket
                  Resource: !Sub arn:aws:s3:::${Name}-${AWS::Region}
                  Effect: 'Allow'
                - Action:
                  - s3:GetObjectVersionForReplication
                  - s3:GetObjectVersionAcl
                  Resource: !Sub arn:aws:s3:::${Name}-${AWS::Region}/*
                  Effect: 'Allow'
                - Action:
                  - s3:ReplicateObject
                  - s3:ReplicateTags
                  - s3:GetObjectVersionTagging
                  Effect: 'Allow'
                  Resource: !Sub arn:aws:s3:::${DestinationBucket}/*
              PolicyName: ReplicaPolicy
              Roles: [!Ref 'ReplicaRole']
          S3Bucket:
            Type: AWS::S3::Bucket
            DeletionPolicy: Delete
            Properties:
              BucketName: !Sub ${Name}-${AWS::Region}
              BucketEncryption:
                ServerSideEncryptionConfiguration:
                  - ServerSideEncryptionByDefault:
                      SSEAlgorithm: AES256
              ReplicationConfiguration:
                Role: !GetAtt [ReplicaRole, Arn]
                Rules:
                  - Id: Replication to the main bucket
                    Priority: 2
                    Filter:
                      Prefix: ''
                    Destination:
                      Bucket: !Sub arn:aws:s3:::${DestinationBucket}
                      StorageClass: STANDARD
                    DeleteMarkerReplication:
                      Status: Disabled
                    Status: Enabled
              VersioningConfiguration:
                Status: Enabled
              LifecycleConfiguration:
                Rules:
                  - Id: Cleanup
                    Prefix: ''
                    Status: Enabled
                    ExpirationInDays: 1
                  - Id: NoncurrentCleanup
                    Prefix: ''
                    Status: Enabled
                    NoncurrentVersionExpiration:
                      NoncurrentDays: 1
                      NewerNoncurrentVersions: 1
  LambdaTriggerExportRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${RolePrefix}Lambda-Role-${CFDataName}"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyName: !Sub "Assume-Management-${CFDataName}-Account-Role"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sts:AssumeRole"
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
  LambdaTriggerExport:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${RolePrefix}${CFDataName}-Trigger-Export"
      Description: !Sub "LambdaFunction to retrieve Compute_Optimizer"
      Handler: index.lambda_handler
      Runtime: python3.8
      MemorySize: 2688
      Timeout: 300
      Role:
        Fn::GetAtt:
          - LambdaTriggerExportRole
          - Arn
      Environment:
        Variables:
          REGIONS: !Ref DeployRegions
          BUCKET_PREFIX: !Sub "${BucketPrefix}${AWS::AccountId}"
          ROLE_ARN: !Ref RoleNameARN
          INCLUDE_MEMBER_ACCOUNTS: 'TRUE'
      Code:
        ZipFile: |
          import os
          import boto3
          from datetime import date

          BUCKET_PREFIX = os.environ["BUCKET_PREFIX"]
          INCLUDE_MEMBER_ACCOUNTS = os.environ.get("INCLUDE_MEMBER_ACCOUNTS", 'TRUE').lower() == 'true'
          REGIONS = os.environ["REGIONS"]
          ROLE_ARN = os.environ['ROLE_ARN']

          def lambda_handler(event, context):
              today = date.today()
              year = today.year
              month = today.month

              sts_connection = boto3.client('sts')
              acct_b = sts_connection.assume_role(RoleArn=ROLE_ARN, RoleSessionName="cross_acct_lambda")

              account_b_creds = {
                "aws_access_key_id":     acct_b['Credentials']['AccessKeyId'],
                "aws_secret_access_key": acct_b['Credentials']['SecretAccessKey'],
                "aws_session_token":     acct_b['Credentials']['SessionToken'],
              }

              acc = boto3.client("sts", **account_b_creds).get_caller_identity()["Account"]

              result_messages = []
              error_messages = []
              for region in [r.strip() for r in REGIONS.split(',')]:
                  # create service client using the assumed role credentials
                  co = boto3.client("compute-optimizer", region_name=region, **account_b_creds)
                  export_funcs = {
                      'ec2_instance': co.export_ec2_instance_recommendations,
                      'auto_scale':   co.export_auto_scaling_group_recommendations,
                      'lambda':       co.export_lambda_function_recommendations,
                      'ebs_volume':   co.export_ebs_volume_recommendations,
                  }
                  bkt = BUCKET_PREFIX + '-' + region
                  print(f"INFO: bucket={bkt}")
                  for name, func in export_funcs.items():
                      try:
                          res = func(
                              includeMemberAccounts=INCLUDE_MEMBER_ACCOUNTS,
                              s3DestinationConfig={'bucket': bkt, 'keyPrefix': f'Compute_Optimizer/Compute_Optimizer_{name}/year={year}/month={month}'}
                          )
                          result_messages.append(f"{region} {name} export queued. JobId: {res['jobId']}")
                      except Exception as exc:
                          error_messages.append(f"ERROR: {region} {name} - {exc}")
              if result_messages:
                  print("Success:\n"+"\n".join(result_messages))
              if error_messages:
                  raise Exception(f"There were {len(error_messages)} errors, out of {len(result_messages) + len(error_messages)} exports: \n" + "\n".join(error_messages))
  CloudWatchTrigger:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub "Scheduler-For-${RolePrefix}${CFDataName}"
      Name: !Sub "Scheduler-For-${RolePrefix}${CFDataName}"
      ScheduleExpression: !Ref Schedule
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - LambdaTriggerExport
              - Arn
          Id: TriggerForGetAccounts
  EventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaTriggerExport.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt CloudWatchTrigger.Arn
  CrawlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${RolePrefix}Compute-Optimizer-Crawler-Lambda-Function"
      Description: "LambdaFunction to retrieve start CO Crawlers"
      Runtime: python3.8
      Code:
        ZipFile: |
          import boto3
          import logging
          import os

          def lambda_handler(event, context):
              glue_client = boto3.client('glue')
              crawlers = [os.environ["EC2Crawler"], os.environ["AUTOCrawler"],os.environ["EBSCrawler"],os.environ["LambdaCrawler"] ]

              for crawler in crawlers:
                  try:
                      glue_client.start_crawler(Name=crawler)
                  except Exception as e:
                      # Send some context about this error to Lambda Logs
                      logging.warning("%s" % e)

      Handler: 'index.lambda_handler'
      MemorySize: 2688
      Timeout: 300
      Role:
        Fn::GetAtt:
          - CrawlerLambdaIAMRole
          - Arn
      Environment:
        Variables:
          EC2Crawler:
            Ref: EC2Crawler
          AUTOCrawler:
            Ref: AUTOCrawler
          EBSCrawler:
            Ref: EBSCrawler
          LambdaCrawler:
            Ref: LambdaCrawler
  CrawlerLambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetBucketNotification'
                  - 's3:PutBucketNotification'
                Resource: !Sub 'arn:aws:s3:::${DestinationBucket}'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:S3CrawlerQue
              - Effect: Allow
                Action:
                  - "glue:StartCrawler"
                Resource: "*"
  LambdaCrawlerInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt CrawlerFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: sqs.amazonaws.com #s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Ref S3CrawlerQue
  LambdaCrawlerEventSourceMapping:
    DependsOn:
      - LambdaCrawlerInvokePermission
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !Ref S3CrawlerQue
      FunctionName: !GetAtt CrawlerFunction.Arn
  EC2Crawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub "${RolePrefix}ec2_Compute_Optimizer_crawler"
      Role: !Ref GlueRoleARN
      DatabaseName: !Ref DatabaseName
      Targets:
        S3Targets:
          - Path: !Sub "s3://${DestinationBucket}/Compute_Optimizer/Compute_Optimizer_ec2_instance"
            Exclusions:
              - "**.json"
  AUTOCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub "${RolePrefix}auto_scale_Compute_Optimizer_crawler"
      Role: !Ref GlueRoleARN
      DatabaseName: !Ref DatabaseName
      Targets:
        S3Targets:
          - Path: !Sub "s3://${DestinationBucket}/Compute_Optimizer/Compute_Optimizer_auto_scale"
            Exclusions:
              - "**.json"
  EBSCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub "${RolePrefix}ebs_volume_Compute_Optimizer_crawler"
      Role: !Ref GlueRoleARN
      DatabaseName: !Ref DatabaseName
      Targets:
        S3Targets:
          - Path: !Sub "s3://${DestinationBucket}/Compute_Optimizer/Compute_Optimizer_ebs_volume"
            Exclusions:
              - "**.json"
  LambdaCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub "${RolePrefix}lambda_Compute_Optimizer_crawler"
      Role: !Ref GlueRoleARN
      DatabaseName: !Ref DatabaseName
      Targets:
        S3Targets:
          - Path: !Sub "s3://${DestinationBucket}/Compute_Optimizer/Compute_Optimizer_lambda"
            Exclusions:
              - "**.json"
  EC2AthenaQuery:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Provides a summary view of the lambda data
      Name: !Sub ${RolePrefix}${CFDataName}-EC2-summary-view
      QueryString: 
        "SELECT instancearn, split_part(replace(instancearn,'\"' ,''),'/',2) as instance_id ,
         try_cast(current_onDemandPrice AS DOUBLE) - try_cast(recommendationOptions_1_onDemandPrice AS DOUBLE) as recommendationOptions_1_Saving , 
         try_cast(current_onDemandPrice AS DOUBLE) - try_cast(recommendationOptions_2_onDemandPrice AS DOUBLE) as recommendationOptions_2_Saving , 
         try_cast(current_onDemandPrice AS DOUBLE) - try_cast(recommendationOptions_3_onDemandPrice AS DOUBLE) as recommendationOptions_3_Saving ,
          * FROM optimization_data.compute_optimizer_ec2_instance WHERE instancearn like '%arn%' "
  EBSAthenaQuery:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Provides a summary view of the lambda data
      Name: !Sub ${RolePrefix}${CFDataName}-EBS-summary-view
      QueryString: 
        "SELECT split_part(replace(volumearn,'\"' ,''),'/',2) as volumeid,
        try_cast(
          current_monthlyprice - recommendationoptions_1_monthlyprice AS DOUBLE
        ) as recommendationOptions_1_Saving,
        try_cast(
          current_monthlyprice - recommendationoptions_2_monthlyprice AS DOUBLE
        ) as recommendationOptions_2_Saving,
          *
        FROM optimization_data.compute_optimizer_ebs_volume 
        WHERE volumearn like '%vol%' "
  LambdaAthenaQuery:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Provides a summary view of the lambda data
      Name: !Sub ${RolePrefix}${CFDataName}-Lambda-summary-view
      QueryString: 
        "SELECT 
          split_part(replace(functionarn,'\"' ,''),':',7) as function_name, 
          try_cast(current_costtotal AS DOUBLE) - try_cast(recommendationOptions_1_costhigh AS DOUBLE) as recommendationOptions_1_Saving ,
          try_cast(current_costtotal AS DOUBLE) - try_cast(recommendationOptions_2_costhigh AS DOUBLE) as recommendationOptions_2_Saving ,
          try_cast(current_costtotal AS DOUBLE) - try_cast(recommendationOptions_3_costhigh AS DOUBLE) as recommendationOptions_3_Saving , 
          * 
          FROM optimization_data.compute_optimizer_lambda
          WHERE functionarn like '%arn%'"
  CustomRessourceFunctionFinalize:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt 'FinalizeLambdaExecutionRole.Arn'
      FunctionName: !Sub "${RolePrefix}Compute-Optimizer-FinalizeSetup-DoNotRun"
      Description: "Lambda to Finalize Setup (call trigger lambda) or Start teardown (Cleanup buckets)"
      Runtime: python3.8
      Architectures: [ arm64 ]
      Code:
        ZipFile: |
          import os
          import uuid
          import json
          import boto3
          import botocore
          import urllib3

          REGIONS = os.environ['REGIONS'].replace(' ', '').split(',')
          BUCKET_PREFIX = os.environ['BUCKET_PREFIX']
          LAMBDA_ARN = os.environ['TRIGGER_LAMBDA']

          def lambda_handler(event, context):
              print(event)
              type_ = event.get('RequestType', 'Undef')
              if type_ == 'Create': res = on_create()
              elif type_ == 'Delete': res = on_delete()
              else: res = (True, f"Not supported operation: {type_}")
              response_data = {'Reason': res[1], 'uuid': str(uuid.uuid1()) }

              url = event.get('ResponseURL')
              body = {}
              body['Status'] = 'SUCCESS' if res[0] else 'FAILED'
              body['Reason'] = str(res[1]) + '\nSee the details in CloudWatch Log Stream: ' + context.log_stream_name
              body['PhysicalResourceId'] = context.log_stream_name
              body['StackId'] = event.get('StackId')
              body['RequestId'] = event.get('RequestId')
              body['LogicalResourceId'] = event.get('LogicalResourceId')
              body['NoEcho'] = False
              body['Data'] = response_data
              print(body)
              if not url: return
              json_body=json.dumps(body)
              try:
                  http = urllib3.PoolManager()
                  response = http.request('PUT', url, body=json_body, headers={'content-type' : '', 'content-length' : str(len(json_body))}, retries=False)
                  print(f"Status code: {response}" )
              except Exception as exc:
                  print("send(..) failed executing requests.put(..): " + str(exc))

          def on_create():
              try:
                  name = LAMBDA_ARN.split(':')[-1]
                  boto3.client('lambda').invoke(FunctionName=name, InvocationType="RequestResponse", Payload='{}')
                  return (True, f'INFO: Invoked {name}')
              except Exception as exc:
                  return (True, f'ERROR: error invoking lambda {exc}')

          def on_delete():
              # Delete all buckets (CF cannot delete if they are non-empty)
              s3 = boto3.resource('s3')
              log = []
              for region in REGIONS:
                  name = BUCKET_PREFIX + "-" + region
                  try:
                      bucket = s3.Bucket(name)
                      bucket.object_versions.delete()
                      log.append(f'INFO:  {name} is empty now')
                      bucket.delete()
                      log.append(f'INFO:  {name} deleted')
                  except botocore.exceptions.ClientError as exc:
                      status = exc.response["ResponseMetadata"]["HTTPStatusCode"]
                      errcode = exc.response["Error"]["Code"]
                      if status == 404:
                          log.append(f'INFO:  {name} - {errcode}')
                      else:
                          log.append(f'ERROR: {name} - {errcode}')
                  except Exception as exc:
                      log.append(f'ERROR: {name} Error: {exc}')
              print('\n'.join(log))
              return (True, '\n'.join(log))
      Handler: 'index.lambda_handler'
      MemorySize: 2688
      Timeout: 300
      Environment:
        Variables:
          REGIONS: !Ref DeployRegions
          BUCKET_PREFIX: !Sub "${BucketPrefix}${AWS::AccountId}"
          TRIGGER_LAMBDA:  !GetAtt LambdaTriggerExport.Arn
  FinalizeLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeAsync
                  - lambda:InvokeFunction
                Resource: !GetAtt LambdaTriggerExport.Arn
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                Resource: !Sub 'arn:aws:s3:::${BucketPrefix}${AWS::AccountId}-*/*'
              - Effect: Allow
                Action:
                  - s3:ListBucketVersions
                  - s3:DeleteBucket
                Resource: !Sub 'arn:aws:s3:::${BucketPrefix}${AWS::AccountId}-*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
  FinalizeSetup:
    DependsOn:
      - LambdaTriggerExport
      - ReplicaitonBucketsStackSet
      - FinalizeLambdaExecutionRole
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt CustomRessourceFunctionFinalize.Arn
